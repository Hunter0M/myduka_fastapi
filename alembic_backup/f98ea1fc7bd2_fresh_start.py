"""fresh_start

Revision ID: f98ea1fc7bd2
Revises: e6dce4915355
Create Date: 2025-01-06 08:12:44.681455

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f98ea1fc7bd2'
down_revision: Union[str, None] = 'e6dce4915355'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Drop tables with foreign keys first
    op.drop_table('sales')  # Drop sales before products
    op.drop_table('role_permissions')
    op.drop_table('user_roles')
    op.drop_table('vendor_products')
    op.drop_table('permissions')
    
    # Then drop the parent tables
    op.drop_table('roles')
    op.drop_table('products')  # Moved after sales is dropped
    
    # Drop remaining tables
    op.drop_table('password_reset_tokens')
    op.drop_table('import_history')
    op.drop_table('contacts')
    
    # Handle column changes
    with op.batch_alter_table('users') as batch_op:
        batch_op.drop_column('last_login')
        batch_op.drop_column('is_active')
        batch_op.alter_column('created_at', type_=sa.DateTime())
        batch_op.alter_column('updated_at', type_=sa.DateTime())


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_table('role_permissions',
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], name='role_permissions_permission_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='role_permissions_role_id_fkey')
    )
    op.create_table('user_roles',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='user_roles_role_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_roles_user_id_fkey')
    )
    op.create_table('vendor_products',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('vendor_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('purchase_price', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='vendor_products_product_id_fkey'),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.id'], name='vendor_products_vendor_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='vendor_products_pkey')
    )
    op.create_table('permissions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', postgresql.ENUM('CREATE', 'READ', 'UPDATE', 'DELETE', name='permissiontype'), autoincrement=False, nullable=False),
    sa.Column('resource', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name='permissions_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='permissions_pkey')
    )
    op.create_table('roles',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='roles_pkey'),
    sa.UniqueConstraint('name', name='roles_name_key')
    )
    # ### end Alembic commands ###
