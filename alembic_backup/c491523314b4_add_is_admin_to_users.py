"""add is_admin to users

Revision ID: c491523314b4
Revises: 8f3e63ec1f5d
Create Date: 2025-01-21 18:22:01.652338

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c491523314b4'
down_revision: Union[str, None] = '8f3e63ec1f5d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('companies', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_constraint('companies_email_key', 'companies', type_='unique')
    op.alter_column('payments', 'status',
               existing_type=postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', name='paymentstatus'),
               nullable=True)
    op.add_column('users', sa.Column('is_admin', sa.Boolean(), nullable=True))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('users', 'is_admin')
    op.alter_column('payments', 'status',
               existing_type=postgresql.ENUM('PENDING', 'COMPLETED', 'FAILED', name='paymentstatus'),
               nullable=False)
    op.create_unique_constraint('companies_email_key', 'companies', ['email'])
    op.alter_column('companies', 'user_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    # ### end Alembic commands ###
